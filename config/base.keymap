#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/dynamic-macros.h>

#include "../zmk-nodefree-config/helper.h"

// #define DEF 0
// #define NAV 1
// #define FN 2
// #define NUM 3
// #define SYS 4
// #define UC 5
// #define MOUSE 6

#define BASE 0
#define NUM 1
#define SYM 2
#define UTIL 3
#define FUN 4
#define BT 5

#include "combos.dtsi"  // requires layer aliases
#include "mouse.dtsi"

#define XXX &none
#define ___ &trans

// define editing shortcuts
#define S_UNDO &kp LG(Z)
#define S_CUT &kp LG(X)
#define S_COPY &kp LG(C)
#define S_PASTE &kp LG(V)
#define S_REDO &kp LS(LG(Z))

// navigation bindings for back/forward and prev tab/next tab
#define BACK &kp LG(LBKT)
#define FWD &kp LG(RBKT)
#define PTAB &kp LS(LG(LBKT))
#define NTAB &kp LS(LG(RBKT))

/* Global settings */

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LH4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RH4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        global-quick-tap-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

/* Nav cluster */

// long-tap action on hold, short-tap action on all interrupts
// #define MT_CORE \
//     flavor = "tap-preferred"; \
//     tapping-term-ms = <220>; \
//     quick-tap-ms = <220>; \
//     hold-trigger-key-positions = <0>;

// &mt { MT_CORE };
// ZMK_BEHAVIOR(mt_home, hold_tap, bindings = <&masked_home>, <&kp>; MT_CORE)
// ZMK_BEHAVIOR(mt_end,  hold_tap,  bindings = <&masked_end>, <&kp>; MT_CORE)

// #define NAV_LEFT  &mt_home 0   LEFT    // tap: left  | long-tap: beginning of line
// #define NAV_RIGHT &mt_end 0    RIGHT   // tap: right | long-tap: end       of line
// #define NAV_UP    &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
// #define NAV_DOWN  &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document
// #define NAV_BSPC  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
// #define NAV_DEL   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward

// // mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
// #define MASK_MODS(NAME, MODS, BINDING) \
//     ZMK_BEHAVIOR(NAME, mod_morph, \
//         bindings = <BINDING>, <BINDING>; \
//         mods = <MODS>; \
//     )
// MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
// MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

// tap: num-word | double-tap: sticky num-layer | hold: num-layer
#define SMART_NUM &smart_num NUM 0
ZMK_BEHAVIOR(smart_num, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_BEHAVIOR(num_dance, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word>, <&sl NUM>;  // reverse this for sticky-num on single tap
)
&num_word {  // num-word, requires PR #1451
    layers = <NUM>;
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
};

// tap: sticky-layer | hold: layer
#define SMART_SYM &smrt_layer SYM SYM
#define SMART_FUN &smrt_layer FUN FUN
ZMK_BEHAVIOR(smrt_layer, hold_tap,
    flavor = "hold-preferred"; // in most cases we want to avoid taps
    tapping-term-ms = <QUICK_TAP_MS>; 
    bindings = <&mo>, <&sl>; 
) 

// smart-mouse, requires PR #1366
ZMK_BEHAVIOR(smart_mouse, tri_state,
    bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
    ignored-key-positions = <LT1 LT3 RT1 RT2 RT3 RM1 RM2 RM3 RH0 RH1>;
    ignored-layers = <MOUSE>;
)

/* Custom behaviors */

// Cmd+Tab swapper, requires PR #1366
ZMK_BEHAVIOR(swapper, tri_state,
    bindings = <&kt LGUI>, <&kp TAB>, <&kt GUI>;
    ignored-key-positions = <LM1>;  // shift-cmd-tab
)

// Sticky layer + sticky shift (workaround for issue #1421)
ZMK_BEHAVIOR(sls, sticky_key,
    release-after-ms = <1000>;
    bindings = <&uc_shift>;
    ignore-modifiers;
)
ZMK_BEHAVIOR(uc_shift, macro,
    wait-ms = <0>;
    tap-ms = <1>;
    bindings = <&macro_press &mo UC &kp LSHFT>
             , <&macro_pause_for_release>
             , <&macro_release &mo UC &kp LSHFT>;
)

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
ZMK_BEHAVIOR(comma_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp COMMA>, <&comma_inner_morph>;
)
ZMK_BEHAVIOR(comma_inner_morph, mod_morph,
    bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;
    mods = <(MOD_LCTL|MOD_RCTL)>;
)

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
ZMK_BEHAVIOR(dot_morph, mod_morph,
    bindings = <&kp DOT>, <&dot_inner_morph>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(dot_inner_morph, mod_morph,
    bindings = <&kp COLON>, <&kp GREATER_THAN>;
    mods = <(MOD_LCTL|MOD_RCTL)>;
)

// tap: qmark | shift + tap: excl
ZMK_BEHAVIOR(qexcl, mod_morph,
    bindings = <&kp QMARK>, <&kp EXCL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: space | shift + tap: dot -> space -> sticky shift
// ZMK_BEHAVIOR(spc_morph, mod_morph,
//     bindings = <&kp SPACE>, <&dot_spc>;
//     mods = <(MOD_LSFT|MOD_RSFT)>;
// )
// ZMK_BEHAVIOR(dot_spc, macro,
//     wait-ms = <5>;
//     tap-ms = <5>;
//     bindings = <&dot_morph_cancel &kp SPACE &sk LSFT>;
// )
// ZMK_BEHAVIOR(dot_morph_cancel, mod_morph,
//     bindings = <&kp DOT>, <&kp DOT>;
//     mods = <(MOD_LSFT|MOD_RSFT)>;
// )

// tap: space | shift + tap: dot -> space -> sticky shift | hold: activate layer
ZMK_BEHAVIOR(lt_spc, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&spc_morph>;
)
ZMK_BEHAVIOR(spc_morph, mod_morph,
    bindings = <&kp SPACE>, <&dot_spc>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(dot_spc, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &sk LSHFT>;
)

// tap: backspace | lshft + tap: delete | rshft + tap: shift-delete
// ZMK_BEHAVIOR(bs_del, mod_morph,
//     bindings = <&kp BSPC>, <&kp DEL>;
//     mods = <(MOD_LSFT|MOD_RSFT)>;
//     keep-mods = <MOD_RSFT>;
// )

// tap: left-parenthesis | shft + tap: less-than
ZMK_BEHAVIOR(lpar_lt, mod_morph,
    bindings = <&kp LPAR>, <&kp LT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: right-parenthesis | shft + tap: greater-than
ZMK_BEHAVIOR(rpar_gt, mod_morph,
    bindings = <&kp RPAR>, <&kp GT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)


// misc aliases
#define CANCEL      &kp K_CANCEL             // cancel caps-word, num-word and smart-mouse

/* Keymap */

ZMK_CONDITIONAL_LAYER(NUM SYM, UTIL)  // NUM + SYM --> UTIL

/ {
    /* chosen { */
    /*     zmk,matrix_transform = &five_column_transform; */
    /* }; */

    keymap {
        compatible = "zmk,keymap";
        default_layer { // ColemakDHm
            bindings = <
            &kp Q        &kp W        &kp F        &kp P        &kp B             &kp J       &kp L         &kp U         &kp Y         &kp APOS 
            &hml LCTL A  &hml LALT R  &hml LGUI S  &hml LSFT T  &kp G             &kp M       &hmr RSFT N   &hmr RGUI E   &hmr LALT I   &hmr RCTL O
      PTAB  &kp Z        &kp X        &kp C        &kp D        &kp V             &kp K       &kp H         &comma_morph  &dot_morph    &qexcl       NTAB
                                      BACK         SMART_NUM    &smart_shft       &lt_spc FUN 0  SMART_SYM     FWD
            >;
        };
        num_layer {
            bindings = <
            &swapper  &kp HASH   &kp DLLR   &kp PRCNT  &kp CARET              &kp PLUS    &kp N7        &kp N8        &kp N9        &kp ASTRK 
            &sk LCTL   &sk LALT  &sk LGUI   &sk LSFT   SMART_FUN              &kp EQUAL   &hmr RSFT N4  &hmr RGUI N5  &hmr LALT N6  &hmr RCTL N0
      ___   S_UNDO    S_CUT     S_COPY     S_PASTE    S_REDO                  &kp MINUS   &kp N1        &kp N2        &kp N3        &kp FSLH  ___
                                CANCEL      ___        &kp SPACE                &kp SPACE   ___         &kp DOT
            >;
        };
        sym_layer {
            bindings = <
            &kp TILDE        &kp MINUS     &kp LBKT        &kp RBKT  &kp PIPE      &kp HOME    &kp PG_UP  &kp UP     &kp PG_DN  &kp END
            &hml LCTL GRAVE  &hml LALT AT  &hml LGUI LPAR  &kp RPAR  &kp AMPS      XXX         &kp LEFT   &kp DOWN   &kp RIGHT  &kp ENTER 
    ___     &kp BSLH         &kp LT        &kp LBRC        &kp RBRC  &kp GT        &key_repeat &kp BSPC   &kp DEL    &kp TAB    &kp ESC   ___
                                         ___           ___       XXX                ___         ___        CANCEL                   
            >;
        };
 
        util_layer {
            bindings = <
            &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_CLR  &dyn_macro RECORD        &kp HOME     &kp PG_UP  &kp UP    &kp PG_DN  &kp END
            &sk LCTL     &sk LALT     &sk LGUI     &sk LSFT    &dyn_macro PLAY          XXX          &kp LEFT   &kp DOWN  &kp RIGHT  &kp ENTER 
        ___ S_UNDO       S_CUT        S_COPY       S_PASTE     S_REDO                   &key_repeat  &kp BSPC   &kp DEL   &kp TAB    &kp ESC   ___
                                       ___          ___         ___                      ___          ___        ___
            >;
        };

        fun_layer {
            bindings = <
            ___        ___        ___        ___        ___              &kp F12  &kp F7     &kp F8  &kp F9  &kp C_VOL_UP
            &sk LCTL   &sk LALT   &sk LGUI   &sk LSFT   ___              &kp F11  &kp F4     &kp F5  &kp F6  &kp C_MUTE
      ___   ___        ___        ___        ___        ___              &kp F10  &kp F1     &kp F2  &kp F3  &kp C_VOL_DN   ___
                                  ___        ___        ___              ___      ___        ___            
            >;
        };
    };
};

/* vim: set ft=c tw=174: */
